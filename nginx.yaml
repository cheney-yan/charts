apiVersion: v1
kind: ReplicationController
metadata:
  annotations:
    ingress.kubernetes.io/enable-cors: "true"
    ingress.kubernetes.io/proxy-body-size: 8m
  creationTimestamp: 2017-02-09T17:41:25Z
  generation: 4
  labels:
    k8s-app: nginx-ingress-lb
  name: nginx-ingress-controller
  namespace: default
  resourceVersion: "3667288"
  selfLink: /api/v1/namespaces/default/replicationcontrollers/nginx-ingress-controller
  uid: faab38b9-eeee-11e6-ac96-06b5786ba455
spec:
  replicas: 2
  selector:
    k8s-app: nginx-ingress-lb
  template:
    metadata:
      creationTimestamp: null
      labels:
        k8s-app: nginx-ingress-lb
        name: nginx-ingress-lb
    spec:
      containers:
      - args:
        - /nginx-ingress-controller
        - --default-backend-service=$(POD_NAMESPACE)/default-http-backend
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: gcr.io/google_containers/nginx-ingress-controller:0.8.3
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: nginx-ingress-lb
        ports:
        - containerPort: 80
          hostPort: 80
          protocol: TCP
        - containerPort: 443
          hostPort: 443
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
      dnsPolicy: ClusterFirst
      hostNetwork: true
      restartPolicy: Always
      securityContext: {}
      terminationGracePeriodSeconds: 60
status:
  availableReplicas: 2
  fullyLabeledReplicas: 2
  observedGeneration: 4
  readyReplicas: 2
  replicas: 2
